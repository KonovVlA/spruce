/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
    var parser = {trace: function trace(){},
        yy: {},
        symbols_: {"error":2,"expressions":3,"Expression":4,"EOF":5,"ConditionalOrExpression":6,"ConditionalAndExpression":7,"|":8,"EqualityExpression":9,"&":10,"RelationalExpression":11,"=":12,"<>":13,"AdditiveExpression":14,"<":15,">":16,"<=":17,">=":18,"MultiplicativeExpression":19,"+":20,"-":21,"UnaryExpression":22,"*":23,"/":24,"UnaryExpressionNotMinus":25,"PostfixExpression":26,"!":27,"Primary":28,"ExpressionName":29,"Literal":30,"ObjectDeclaration":31,"ArrayDeclaration":32,"(":33,")":34,"FieldAccess":35,"ArrayAccess":36,"MethodInvocation":37,"{":38,"}":39,"FieldDeclarationList":40,"FieldDeclaration":41,",":42,"StringLiteral":43,":":44,"Identifier":45,"[":46,"]":47,"ArrayElementList":48,"NumberLiteral":49,"BooleanLiteral":50,"NullLiteral":51,"DateLiteral":52,"DateTimeLiteral":53,"NUMBER":54,"TRUE":55,"FALSE":56,"STRING_DQ":57,"STRING_SQ":58,"NULL":59,"DATE":60,"DATETIME":61,".":62,"?":63,"ArgumentList":64,"ReservedElementIdentifier":65,"IDENTIFIER":66,"$IDENTIFIER":67,"$accept":0,"$end":1},
        terminals_: {2:"error",5:"EOF",8:"|",10:"&",12:"=",13:"<>",15:"<",16:">",17:"<=",18:">=",20:"+",21:"-",23:"*",24:"/",27:"!",33:"(",34:")",38:"{",39:"}",42:",",44:":",46:"[",47:"]",54:"NUMBER",55:"TRUE",56:"FALSE",57:"STRING_DQ",58:"STRING_SQ",59:"NULL",60:"DATE",61:"DATETIME",62:".",63:"?",66:"IDENTIFIER",67:"$IDENTIFIER"},
        productions_: [0,[3,2],[4,1],[6,1],[6,3],[7,1],[7,3],[9,1],[9,3],[9,3],[11,1],[11,3],[11,3],[11,3],[11,3],[14,1],[14,3],[14,3],[19,1],[19,3],[19,3],[22,2],[22,1],[25,1],[25,2],[26,1],[26,1],[28,1],[28,1],[28,1],[28,3],[28,1],[28,1],[28,1],[31,2],[31,3],[40,1],[40,3],[41,3],[41,3],[32,2],[32,3],[48,1],[48,3],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[49,1],[50,1],[50,1],[43,1],[43,1],[51,1],[52,1],[53,1],[35,3],[35,3],[36,4],[37,3],[37,4],[64,1],[64,3],[29,1],[29,1],[29,3],[29,3],[45,1],[65,1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
                                          /*``*/) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1: return $$[$0-1];
                    break;
                case 2: this.$ = $$[$0];
                    break;
                case 3: this.$ = $$[$0];
                    break;
                case 4: this.$ = {t: "j", v: "f", a: [$$[$0-2], $$[$0]]};
                    break;
                case 5: this.$ = $$[$0];
                    break;
                case 6: this.$ = {t: "j", v: "e", a: [$$[$0-2], $$[$0]]};
                    break;
                case 7: this.$ = $$[$0];
                    break;
                case 8: this.$ = {t: "j", v: "g", a: [$$[$0-2], $$[$0]]};
                    break;
                case 9: this.$ = {t: "j", v: "h", a: [$$[$0-2], $$[$0]]};
                    break;
                case 10: this.$ = $$[$0];
                    break;
                case 11: this.$ = {t: "j", v: "i", a: [$$[$0-2], $$[$0]]};
                    break;
                case 12: this.$ = {t: "j", v: "j", a: [$$[$0-2], $$[$0]]};
                    break;
                case 13: this.$ = {t: "j", v: "k", a: [$$[$0-2], $$[$0]]};
                    break;
                case 14: this.$ = {t: "j", v: "l", a: [$$[$0-2], $$[$0]]};
                    break;
                case 15: this.$ = $$[$0];
                    break;
                case 16: this.$ = {t: "j", v: "a", a: [$$[$0-2], $$[$0]]};
                    break;
                case 17: this.$ = {t: "j", v: "b", a: [$$[$0-2], $$[$0]]};
                    break;
                case 18: this.$ = $$[$0];
                    break;
                case 19: this.$ = {t: "j", v: "c", a: [$$[$0-2], $$[$0]]};
                    break;
                case 20: this.$ = {t: "j", v: "d", a: [$$[$0-2], $$[$0]]};
                    break;
                case 21: this.$ = {t: "j", v: "m", a: [$$[$0]]};
                    break;
                case 22: this.$ = $$[$0];
                    break;
                case 23: this.$ = $$[$0];
                    break;
                case 24: this.$ = {t: "j", v: "n", a: [$$[$0]]};
                    break;
                case 25: this.$ = $$[$0];
                    break;
                case 26: this.$ = $$[$0];
                    break;
                case 27: this.$ = $$[$0];
                    break;
                case 28: this.$ = $$[$0];
                    break;
                case 29: this.$ = $$[$0];
                    break;
                case 30: this.$ = $$[$0-1];
                    break;
                case 31: this.$ = $$[$0];
                    break;
                case 32: this.$ = $$[$0];
                    break;
                case 33: this.$ = $$[$0];
                    break;
                case 34: this.$ = {t: "i", a: []};
                    break;
                case 35: this.$ = {t: "i", a: $$[$0-1]};
                    break;
                case 36: this.$ = [$$[$0]];
                    break;
                case 37: $$[$0].unshift($$[$0-2]); this.$ = $$[$0];
                    break;
                case 38: this.$ = {t: "j", v: "o", a: [$$[$0-2], $$[$0]]};
                    break;
                case 39: this.$ = {t: "j", v: "o", a: [$$[$0-2], $$[$0]]};
                    break;
                case 40: this.$ = {t: "a", a: []};
                    break;
                case 41: this.$ = {t: "a", a: $$[$0-1]};
                    break;
                case 42: this.$ = [$$[$0]];
                    break;
                case 43: $$[$0].unshift($$[$0-2]); this.$ = $$[$0];
                    break;
                case 44: this.$ = $$[$0];
                    break;
                case 45: this.$ = $$[$0];
                    break;
                case 46: this.$ = $$[$0];
                    break;
                case 47: this.$ = $$[$0];
                    break;
                case 48: this.$ = $$[$0];
                    break;
                case 49: this.$ = $$[$0];
                    break;
                case 50: this.$ = {t: "h", v: $$[$0]};
                    break;
                case 51: this.$ = {t: "b", v: "a"};
                    break;
                case 52: this.$ = {t: "b", v: "b"};
                    break;
                case 53: this.$ = {t: "k", v: $$[$0].substr(1, $$[$0].length - 2).replace(/\\"/g, '"') };
                    break;
                case 54: this.$ = {t: "k", v: $$[$0].substr(1, $$[$0].length - 2).replace(/\\'/g, '\'') };
                    break;
                case 55: this.$ = {t: "g"};
                    break;
                case 56: this.$ = {t: "c", v: $$[$0].substr(1, $$[$0].length - 2) + " 00:00"};
                    break;
                case 57: this.$ = {t: "c", v: $$[$0].substr(1, $$[$0].length - 2)};
                    break;
                case 58: this.$ = {t: "j", v: "p", a: [$$[$0-2], $$[$0]]};
                    break;
                case 59: this.$ = {t: "j", v: "r", a: [$$[$0-2], $$[$0]]};
                    break;
                case 60: this.$ = {t: "j", v: "q", a: [$$[$0-3], $$[$0-1]]};
                    break;
                case 61: this.$ = {t: "e", v: $$[$0-2].v, a: []};
                    break;
                case 62: this.$ = {t: "e", v: $$[$0-3].v, a: $$[$0-1]};
                    break;
                case 63: this.$ = [$$[$0]];
                    break;
                case 64: $$[$0].unshift($$[$0-2]); this.$ = $$[$0];
                    break;
                case 65: this.$ = $$[$0];
                    break;
                case 66: this.$ = $$[$0];
                    break;
                case 67: this.$ = {t: "j", v: "p", a: [$$[$0-2], $$[$0]]};
                    break;
                case 68: this.$ = {t: "j", v: "r", a: [$$[$0-2], $$[$0]]};
                    break;
                case 69: this.$ = {t: "d", v: $$[$0]};
                    break;
                case 70: this.$ = {t: "f", v: $$[$0]};
                break;
            }
        },
        table: [{3:1,4:2,6:3,7:4,9:5,11:6,14:7,19:8,21:[1,10],22:9,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{1:[3]},{5:[1,43]},{5:[2,2],8:[1,44],34:[2,2],39:[2,2],42:[2,2],47:[2,2]},{5:[2,3],8:[2,3],10:[1,45],34:[2,3],39:[2,3],42:[2,3],47:[2,3]},{5:[2,5],8:[2,5],10:[2,5],12:[1,46],13:[1,47],34:[2,5],39:[2,5],42:[2,5],47:[2,5]},{5:[2,7],8:[2,7],10:[2,7],12:[2,7],13:[2,7],15:[1,48],16:[1,49],17:[1,50],18:[1,51],34:[2,7],39:[2,7],42:[2,7],47:[2,7]},{5:[2,10],8:[2,10],10:[2,10],12:[2,10],13:[2,10],15:[2,10],16:[2,10],17:[2,10],18:[2,10],20:[1,52],21:[1,53],34:[2,10],39:[2,10],42:[2,10],47:[2,10]},{5:[2,15],8:[2,15],10:[2,15],12:[2,15],13:[2,15],15:[2,15],16:[2,15],17:[2,15],18:[2,15],20:[2,15],21:[2,15],23:[1,54],24:[1,55],34:[2,15],39:[2,15],42:[2,15],47:[2,15]},{5:[2,18],8:[2,18],10:[2,18],12:[2,18],13:[2,18],15:[2,18],16:[2,18],17:[2,18],18:[2,18],20:[2,18],21:[2,18],23:[2,18],24:[2,18],34:[2,18],39:[2,18],42:[2,18],47:[2,18]},{21:[1,10],22:56,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{5:[2,22],8:[2,22],10:[2,22],12:[2,22],13:[2,22],15:[2,22],16:[2,22],17:[2,22],18:[2,22],20:[2,22],21:[2,22],23:[2,22],24:[2,22],34:[2,22],39:[2,22],42:[2,22],47:[2,22]},{5:[2,23],8:[2,23],10:[2,23],12:[2,23],13:[2,23],15:[2,23],16:[2,23],17:[2,23],18:[2,23],20:[2,23],21:[2,23],23:[2,23],24:[2,23],34:[2,23],39:[2,23],42:[2,23],46:[1,57],47:[2,23]},{21:[1,10],22:58,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{5:[2,25],8:[2,25],10:[2,25],12:[2,25],13:[2,25],15:[2,25],16:[2,25],17:[2,25],18:[2,25],20:[2,25],21:[2,25],23:[2,25],24:[2,25],34:[2,25],39:[2,25],42:[2,25],46:[2,25],47:[2,25],62:[1,59],63:[1,60]},{5:[2,26],8:[2,26],10:[2,26],12:[2,26],13:[2,26],15:[2,26],16:[2,26],17:[2,26],18:[2,26],20:[2,26],21:[2,26],23:[2,26],24:[2,26],34:[2,26],39:[2,26],42:[2,26],46:[2,26],47:[2,26],62:[1,61],63:[1,62]},{5:[2,27],8:[2,27],10:[2,27],12:[2,27],13:[2,27],15:[2,27],16:[2,27],17:[2,27],18:[2,27],20:[2,27],21:[2,27],23:[2,27],24:[2,27],34:[2,27],39:[2,27],42:[2,27],46:[2,27],47:[2,27],62:[2,27],63:[2,27]},{5:[2,28],8:[2,28],10:[2,28],12:[2,28],13:[2,28],15:[2,28],16:[2,28],17:[2,28],18:[2,28],20:[2,28],21:[2,28],23:[2,28],24:[2,28],34:[2,28],39:[2,28],42:[2,28],46:[2,28],47:[2,28],62:[2,28],63:[2,28]},{5:[2,29],8:[2,29],10:[2,29],12:[2,29],13:[2,29],15:[2,29],16:[2,29],17:[2,29],18:[2,29],20:[2,29],21:[2,29],23:[2,29],24:[2,29],34:[2,29],39:[2,29],42:[2,29],46:[2,29],47:[2,29],62:[2,29],63:[2,29]},{4:63,6:3,7:4,9:5,11:6,14:7,19:8,21:[1,10],22:9,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{5:[2,31],8:[2,31],10:[2,31],12:[2,31],13:[2,31],15:[2,31],16:[2,31],17:[2,31],18:[2,31],20:[2,31],21:[2,31],23:[2,31],24:[2,31],34:[2,31],39:[2,31],42:[2,31],46:[2,31],47:[2,31],62:[2,31],63:[2,31]},{5:[2,32],8:[2,32],10:[2,32],12:[2,32],13:[2,32],15:[2,32],16:[2,32],17:[2,32],18:[2,32],20:[2,32],21:[2,32],23:[2,32],24:[2,32],34:[2,32],39:[2,32],42:[2,32],46:[2,32],47:[2,32],62:[2,32],63:[2,32]},{5:[2,33],8:[2,33],10:[2,33],12:[2,33],13:[2,33],15:[2,33],16:[2,33],17:[2,33],18:[2,33],20:[2,33],21:[2,33],23:[2,33],24:[2,33],34:[2,33],39:[2,33],42:[2,33],46:[2,33],47:[2,33],62:[2,33],63:[2,33]},{5:[2,65],8:[2,65],10:[2,65],12:[2,65],13:[2,65],15:[2,65],16:[2,65],17:[2,65],18:[2,65],20:[2,65],21:[2,65],23:[2,65],24:[2,65],33:[1,64],34:[2,65],39:[2,65],42:[2,65],46:[2,65],47:[2,65],62:[2,65],63:[2,65]},{5:[2,66],8:[2,66],10:[2,66],12:[2,66],13:[2,66],15:[2,66],16:[2,66],17:[2,66],18:[2,66],20:[2,66],21:[2,66],23:[2,66],24:[2,66],34:[2,66],39:[2,66],42:[2,66],46:[2,66],47:[2,66],62:[2,66],63:[2,66]},{5:[2,44],8:[2,44],10:[2,44],12:[2,44],13:[2,44],15:[2,44],16:[2,44],17:[2,44],18:[2,44],20:[2,44],21:[2,44],23:[2,44],24:[2,44],34:[2,44],39:[2,44],42:[2,44],46:[2,44],47:[2,44],62:[2,44],63:[2,44]},{5:[2,45],8:[2,45],10:[2,45],12:[2,45],13:[2,45],15:[2,45],16:[2,45],17:[2,45],18:[2,45],20:[2,45],21:[2,45],23:[2,45],24:[2,45],34:[2,45],39:[2,45],42:[2,45],46:[2,45],47:[2,45],62:[2,45],63:[2,45]},{5:[2,46],8:[2,46],10:[2,46],12:[2,46],13:[2,46],15:[2,46],16:[2,46],17:[2,46],18:[2,46],20:[2,46],21:[2,46],23:[2,46],24:[2,46],34:[2,46],39:[2,46],42:[2,46],46:[2,46],47:[2,46],62:[2,46],63:[2,46]},{5:[2,47],8:[2,47],10:[2,47],12:[2,47],13:[2,47],15:[2,47],16:[2,47],17:[2,47],18:[2,47],20:[2,47],21:[2,47],23:[2,47],24:[2,47],34:[2,47],39:[2,47],42:[2,47],46:[2,47],47:[2,47],62:[2,47],63:[2,47]},{5:[2,48],8:[2,48],10:[2,48],12:[2,48],13:[2,48],15:[2,48],16:[2,48],17:[2,48],18:[2,48],20:[2,48],21:[2,48],23:[2,48],24:[2,48],34:[2,48],39:[2,48],42:[2,48],46:[2,48],47:[2,48],62:[2,48],63:[2,48]},{5:[2,49],8:[2,49],10:[2,49],12:[2,49],13:[2,49],15:[2,49],16:[2,49],17:[2,49],18:[2,49],20:[2,49],21:[2,49],23:[2,49],24:[2,49],34:[2,49],39:[2,49],42:[2,49],46:[2,49],47:[2,49],62:[2,49],63:[2,49]},{39:[1,65],40:66,41:67,43:68,45:69,57:[1,38],58:[1,39],66:[1,33]},{4:72,6:3,7:4,9:5,11:6,14:7,19:8,21:[1,10],22:9,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],47:[1,70],48:71,49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{5:[2,69],8:[2,69],10:[2,69],12:[2,69],13:[2,69],15:[2,69],16:[2,69],17:[2,69],18:[2,69],20:[2,69],21:[2,69],23:[2,69],24:[2,69],33:[2,69],34:[2,69],39:[2,69],42:[2,69],44:[2,69],46:[2,69],47:[2,69],62:[2,69],63:[2,69]},{5:[2,70],8:[2,70],10:[2,70],12:[2,70],13:[2,70],15:[2,70],16:[2,70],17:[2,70],18:[2,70],20:[2,70],21:[2,70],23:[2,70],24:[2,70],34:[2,70],39:[2,70],42:[2,70],46:[2,70],47:[2,70],62:[2,70],63:[2,70]},{5:[2,50],8:[2,50],10:[2,50],12:[2,50],13:[2,50],15:[2,50],16:[2,50],17:[2,50],18:[2,50],20:[2,50],21:[2,50],23:[2,50],24:[2,50],34:[2,50],39:[2,50],42:[2,50],46:[2,50],47:[2,50],62:[2,50],63:[2,50]},{5:[2,51],8:[2,51],10:[2,51],12:[2,51],13:[2,51],15:[2,51],16:[2,51],17:[2,51],18:[2,51],20:[2,51],21:[2,51],23:[2,51],24:[2,51],34:[2,51],39:[2,51],42:[2,51],46:[2,51],47:[2,51],62:[2,51],63:[2,51]},{5:[2,52],8:[2,52],10:[2,52],12:[2,52],13:[2,52],15:[2,52],16:[2,52],17:[2,52],18:[2,52],20:[2,52],21:[2,52],23:[2,52],24:[2,52],34:[2,52],39:[2,52],42:[2,52],46:[2,52],47:[2,52],62:[2,52],63:[2,52]},{5:[2,53],8:[2,53],10:[2,53],12:[2,53],13:[2,53],15:[2,53],16:[2,53],17:[2,53],18:[2,53],20:[2,53],21:[2,53],23:[2,53],24:[2,53],34:[2,53],39:[2,53],42:[2,53],44:[2,53],46:[2,53],47:[2,53],62:[2,53],63:[2,53]},{5:[2,54],8:[2,54],10:[2,54],12:[2,54],13:[2,54],15:[2,54],16:[2,54],17:[2,54],18:[2,54],20:[2,54],21:[2,54],23:[2,54],24:[2,54],34:[2,54],39:[2,54],42:[2,54],44:[2,54],46:[2,54],47:[2,54],62:[2,54],63:[2,54]},{5:[2,55],8:[2,55],10:[2,55],12:[2,55],13:[2,55],15:[2,55],16:[2,55],17:[2,55],18:[2,55],20:[2,55],21:[2,55],23:[2,55],24:[2,55],34:[2,55],39:[2,55],42:[2,55],46:[2,55],47:[2,55],62:[2,55],63:[2,55]},{5:[2,56],8:[2,56],10:[2,56],12:[2,56],13:[2,56],15:[2,56],16:[2,56],17:[2,56],18:[2,56],20:[2,56],21:[2,56],23:[2,56],24:[2,56],34:[2,56],39:[2,56],42:[2,56],46:[2,56],47:[2,56],62:[2,56],63:[2,56]},{5:[2,57],8:[2,57],10:[2,57],12:[2,57],13:[2,57],15:[2,57],16:[2,57],17:[2,57],18:[2,57],20:[2,57],21:[2,57],23:[2,57],24:[2,57],34:[2,57],39:[2,57],42:[2,57],46:[2,57],47:[2,57],62:[2,57],63:[2,57]},{1:[2,1]},{7:73,9:5,11:6,14:7,19:8,21:[1,10],22:9,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{9:74,11:6,14:7,19:8,21:[1,10],22:9,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{11:75,14:7,19:8,21:[1,10],22:9,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{11:76,14:7,19:8,21:[1,10],22:9,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{14:77,19:8,21:[1,10],22:9,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{14:78,19:8,21:[1,10],22:9,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{14:79,19:8,21:[1,10],22:9,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{14:80,19:8,21:[1,10],22:9,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{19:81,21:[1,10],22:9,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{19:82,21:[1,10],22:9,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{21:[1,10],22:83,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{21:[1,10],22:84,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{5:[2,21],8:[2,21],10:[2,21],12:[2,21],13:[2,21],15:[2,21],16:[2,21],17:[2,21],18:[2,21],20:[2,21],21:[2,21],23:[2,21],24:[2,21],34:[2,21],39:[2,21],42:[2,21],47:[2,21]},{4:85,6:3,7:4,9:5,11:6,14:7,19:8,21:[1,10],22:9,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{5:[2,24],8:[2,24],10:[2,24],12:[2,24],13:[2,24],15:[2,24],16:[2,24],17:[2,24],18:[2,24],20:[2,24],21:[2,24],23:[2,24],24:[2,24],34:[2,24],39:[2,24],42:[2,24],47:[2,24]},{45:86,66:[1,33]},{45:87,66:[1,33]},{45:88,66:[1,33]},{45:89,66:[1,33]},{34:[1,90]},{4:93,6:3,7:4,9:5,11:6,14:7,19:8,21:[1,10],22:9,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],34:[1,91],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],64:92,65:24,66:[1,33],67:[1,34]},{5:[2,34],8:[2,34],10:[2,34],12:[2,34],13:[2,34],15:[2,34],16:[2,34],17:[2,34],18:[2,34],20:[2,34],21:[2,34],23:[2,34],24:[2,34],34:[2,34],39:[2,34],42:[2,34],46:[2,34],47:[2,34],62:[2,34],63:[2,34]},{39:[1,94]},{39:[2,36],42:[1,95]},{44:[1,96]},{44:[1,97]},{5:[2,40],8:[2,40],10:[2,40],12:[2,40],13:[2,40],15:[2,40],16:[2,40],17:[2,40],18:[2,40],20:[2,40],21:[2,40],23:[2,40],24:[2,40],34:[2,40],39:[2,40],42:[2,40],46:[2,40],47:[2,40],62:[2,40],63:[2,40]},{47:[1,98]},{42:[1,99],47:[2,42]},{5:[2,4],8:[2,4],10:[1,45],34:[2,4],39:[2,4],42:[2,4],47:[2,4]},{5:[2,6],8:[2,6],10:[2,6],12:[1,46],13:[1,47],34:[2,6],39:[2,6],42:[2,6],47:[2,6]},{5:[2,8],8:[2,8],10:[2,8],12:[2,8],13:[2,8],15:[1,48],16:[1,49],17:[1,50],18:[1,51],34:[2,8],39:[2,8],42:[2,8],47:[2,8]},{5:[2,9],8:[2,9],10:[2,9],12:[2,9],13:[2,9],15:[1,48],16:[1,49],17:[1,50],18:[1,51],34:[2,9],39:[2,9],42:[2,9],47:[2,9]},{5:[2,11],8:[2,11],10:[2,11],12:[2,11],13:[2,11],15:[2,11],16:[2,11],17:[2,11],18:[2,11],20:[1,52],21:[1,53],34:[2,11],39:[2,11],42:[2,11],47:[2,11]},{5:[2,12],8:[2,12],10:[2,12],12:[2,12],13:[2,12],15:[2,12],16:[2,12],17:[2,12],18:[2,12],20:[1,52],21:[1,53],34:[2,12],39:[2,12],42:[2,12],47:[2,12]},{5:[2,13],8:[2,13],10:[2,13],12:[2,13],13:[2,13],15:[2,13],16:[2,13],17:[2,13],18:[2,13],20:[1,52],21:[1,53],34:[2,13],39:[2,13],42:[2,13],47:[2,13]},{5:[2,14],8:[2,14],10:[2,14],12:[2,14],13:[2,14],15:[2,14],16:[2,14],17:[2,14],18:[2,14],20:[1,52],21:[1,53],34:[2,14],39:[2,14],42:[2,14],47:[2,14]},{5:[2,16],8:[2,16],10:[2,16],12:[2,16],13:[2,16],15:[2,16],16:[2,16],17:[2,16],18:[2,16],20:[2,16],21:[2,16],23:[1,54],24:[1,55],34:[2,16],39:[2,16],42:[2,16],47:[2,16]},{5:[2,17],8:[2,17],10:[2,17],12:[2,17],13:[2,17],15:[2,17],16:[2,17],17:[2,17],18:[2,17],20:[2,17],21:[2,17],23:[1,54],24:[1,55],34:[2,17],39:[2,17],42:[2,17],47:[2,17]},{5:[2,19],8:[2,19],10:[2,19],12:[2,19],13:[2,19],15:[2,19],16:[2,19],17:[2,19],18:[2,19],20:[2,19],21:[2,19],23:[2,19],24:[2,19],34:[2,19],39:[2,19],42:[2,19],47:[2,19]},{5:[2,20],8:[2,20],10:[2,20],12:[2,20],13:[2,20],15:[2,20],16:[2,20],17:[2,20],18:[2,20],20:[2,20],21:[2,20],23:[2,20],24:[2,20],34:[2,20],39:[2,20],42:[2,20],47:[2,20]},{47:[1,100]},{5:[2,58],8:[2,58],10:[2,58],12:[2,58],13:[2,58],15:[2,58],16:[2,58],17:[2,58],18:[2,58],20:[2,58],21:[2,58],23:[2,58],24:[2,58],34:[2,58],39:[2,58],42:[2,58],46:[2,58],47:[2,58],62:[2,58],63:[2,58]},{5:[2,59],8:[2,59],10:[2,59],12:[2,59],13:[2,59],15:[2,59],16:[2,59],17:[2,59],18:[2,59],20:[2,59],21:[2,59],23:[2,59],24:[2,59],34:[2,59],39:[2,59],42:[2,59],46:[2,59],47:[2,59],62:[2,59],63:[2,59]},{5:[2,67],8:[2,67],10:[2,67],12:[2,67],13:[2,67],15:[2,67],16:[2,67],17:[2,67],18:[2,67],20:[2,67],21:[2,67],23:[2,67],24:[2,67],34:[2,67],39:[2,67],42:[2,67],46:[2,67],47:[2,67],62:[2,67],63:[2,67]},{5:[2,68],8:[2,68],10:[2,68],12:[2,68],13:[2,68],15:[2,68],16:[2,68],17:[2,68],18:[2,68],20:[2,68],21:[2,68],23:[2,68],24:[2,68],34:[2,68],39:[2,68],42:[2,68],46:[2,68],47:[2,68],62:[2,68],63:[2,68]},{5:[2,30],8:[2,30],10:[2,30],12:[2,30],13:[2,30],15:[2,30],16:[2,30],17:[2,30],18:[2,30],20:[2,30],21:[2,30],23:[2,30],24:[2,30],34:[2,30],39:[2,30],42:[2,30],46:[2,30],47:[2,30],62:[2,30],63:[2,30]},{5:[2,61],8:[2,61],10:[2,61],12:[2,61],13:[2,61],15:[2,61],16:[2,61],17:[2,61],18:[2,61],20:[2,61],21:[2,61],23:[2,61],24:[2,61],34:[2,61],39:[2,61],42:[2,61],46:[2,61],47:[2,61],62:[2,61],63:[2,61]},{34:[1,101]},{34:[2,63],42:[1,102]},{5:[2,35],8:[2,35],10:[2,35],12:[2,35],13:[2,35],15:[2,35],16:[2,35],17:[2,35],18:[2,35],20:[2,35],21:[2,35],23:[2,35],24:[2,35],34:[2,35],39:[2,35],42:[2,35],46:[2,35],47:[2,35],62:[2,35],63:[2,35]},{40:103,41:67,43:68,45:69,57:[1,38],58:[1,39],66:[1,33]},{4:104,6:3,7:4,9:5,11:6,14:7,19:8,21:[1,10],22:9,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{4:105,6:3,7:4,9:5,11:6,14:7,19:8,21:[1,10],22:9,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{5:[2,41],8:[2,41],10:[2,41],12:[2,41],13:[2,41],15:[2,41],16:[2,41],17:[2,41],18:[2,41],20:[2,41],21:[2,41],23:[2,41],24:[2,41],34:[2,41],39:[2,41],42:[2,41],46:[2,41],47:[2,41],62:[2,41],63:[2,41]},{4:72,6:3,7:4,9:5,11:6,14:7,19:8,21:[1,10],22:9,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],48:106,49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],65:24,66:[1,33],67:[1,34]},{5:[2,60],8:[2,60],10:[2,60],12:[2,60],13:[2,60],15:[2,60],16:[2,60],17:[2,60],18:[2,60],20:[2,60],21:[2,60],23:[2,60],24:[2,60],34:[2,60],39:[2,60],42:[2,60],46:[2,60],47:[2,60],62:[2,60],63:[2,60]},{5:[2,62],8:[2,62],10:[2,62],12:[2,62],13:[2,62],15:[2,62],16:[2,62],17:[2,62],18:[2,62],20:[2,62],21:[2,62],23:[2,62],24:[2,62],34:[2,62],39:[2,62],42:[2,62],46:[2,62],47:[2,62],62:[2,62],63:[2,62]},{4:93,6:3,7:4,9:5,11:6,14:7,19:8,21:[1,10],22:9,25:11,26:12,27:[1,13],28:14,29:15,30:16,31:17,32:18,33:[1,19],35:20,36:21,37:22,38:[1,31],43:27,45:23,46:[1,32],49:25,50:26,51:28,52:29,53:30,54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],64:107,65:24,66:[1,33],67:[1,34]},{39:[2,37]},{39:[2,38],42:[2,38]},{39:[2,39],42:[2,39]},{47:[2,43]},{34:[2,64]}],
        defaultActions: {43:[2,1],103:[2,37],106:[2,43],107:[2,64]},
        parseError: function parseError(str,hash){if(hash.recoverable){this.trace(str)}else{throw new Error(str)}},
        parse: function parse(input) {
            var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            this.lexer.setInput(input);
            this.lexer.yy = this.yy;
            this.yy.lexer = this.lexer;
            this.yy.parser = this;
            if (typeof this.lexer.yylloc == 'undefined') {
                this.lexer.yylloc = {};
            }
            var yyloc = this.lexer.yylloc;
            lstack.push(yyloc);
            var ranges = this.lexer.options && this.lexer.options.ranges;
            if (typeof this.yy.parseError === 'function') {
                this.parseError = this.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            function lex() {
                var token;
                token = self.lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            }
            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (this.lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: this.lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: this.lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(this.lexer.yytext);
                        lstack.push(this.lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = this.lexer.yyleng;
                            yytext = this.lexer.yytext;
                            yylineno = this.lexer.yylineno;
                            yyloc = this.lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [
                                lstack[lstack.length - (len || 1)].range[0],
                                lstack[lstack.length - 1].range[1]
                            ];
                        }
                        r = this.performAction.apply(yyval, [
                            yytext,
                            yyleng,
                            yylineno,
                            this.yy,
                            action[1],
                            vstack,
                            lstack
                        ].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }};
    /* generated by jison-lex 0.2.1 */
    var lexer = (function(){
        var lexer = {

            EOF:1,

            parseError:function parseError(str,hash){if(this.yy.parser){this.yy.parser.parseError(str,hash)}else{throw new Error(str)}},

            // resets the lexer, sets new input
            setInput:function (input){this._input=input;this._more=this._backtrack=this.done=false;this.yylineno=this.yyleng=0;this.yytext=this.matched=this.match="";this.conditionStack=["INITIAL"];this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0};if(this.options.ranges){this.yylloc.range=[0,0]}this.offset=0;return this},

            // consumes and returns one char from the input
            input:function (){var ch=this._input[0];this.yytext+=ch;this.yyleng++;this.offset++;this.match+=ch;this.matched+=ch;var lines=ch.match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno++;this.yylloc.last_line++}else{this.yylloc.last_column++}if(this.options.ranges){this.yylloc.range[1]++}this._input=this._input.slice(1);return ch},

            // unshifts one char (or a string) into the input
            unput:function (ch){var len=ch.length;var lines=ch.split(/(?:\r\n?|\n)/g);this._input=ch+this._input;this.yytext=this.yytext.substr(0,this.yytext.length-len-1);this.offset-=len;var oldLines=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1);this.matched=this.matched.substr(0,this.matched.length-1);if(lines.length-1){this.yylineno-=lines.length-1}var r=this.yylloc.range;this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:lines?(lines.length===oldLines.length?this.yylloc.first_column:0)+oldLines[oldLines.length-lines.length].length-lines[0].length:this.yylloc.first_column-len};if(this.options.ranges){this.yylloc.range=[r[0],r[0]+this.yyleng-len]}this.yyleng=this.yytext.length;return this},

            // When called from action, caches matched text and appends it on next action
            more:function (){this._more=true;return this},

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject:function (){if(this.options.backtrack_lexer){this._backtrack=true}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}return this},

            // retain first n characters of the match
            less:function (n){this.unput(this.match.slice(n))},

            // displays already matched input, i.e. for error messages
            pastInput:function (){var past=this.matched.substr(0,this.matched.length-this.match.length);return(past.length>20?"...":"")+past.substr(-20).replace(/\n/g,"")},

            // displays upcoming input, i.e. for error messages
            upcomingInput:function (){var next=this.match;if(next.length<20){next+=this._input.substr(0,20-next.length)}return(next.substr(0,20)+(next.length>20?"...":"")).replace(/\n/g,"")},

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition:function (){var pre=this.pastInput();var c=new Array(pre.length+1).join("-");return pre+this.upcomingInput()+"\n"+c+"^"},

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match:function (match,indexed_rule){var token,lines,backup;if(this.options.backtrack_lexer){backup={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done};if(this.options.ranges){backup.yylloc.range=this.yylloc.range.slice(0)}}lines=match[0].match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno+=lines.length}this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:lines?lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+match[0].length};this.yytext+=match[0];this.match+=match[0];this.matches=match;this.yyleng=this.yytext.length;if(this.options.ranges){this.yylloc.range=[this.offset,this.offset+=this.yyleng]}this._more=false;this._backtrack=false;this._input=this._input.slice(match[0].length);this.matched+=match[0];token=this.performAction.call(this,this.yy,this,indexed_rule,this.conditionStack[this.conditionStack.length-1]);if(this.done&&this._input){this.done=false}if(token){return token}else if(this._backtrack){for(var k in backup){this[k]=backup[k]}return false}return false},

            // return next match in input
            next:function (){if(this.done){return this.EOF}if(!this._input){this.done=true}var token,match,tempMatch,index;if(!this._more){this.yytext="";this.match=""}var rules=this._currentRules();for(var i=0;i<rules.length;i++){tempMatch=this._input.match(this.rules[rules[i]]);if(tempMatch&&(!match||tempMatch[0].length>match[0].length)){match=tempMatch;index=i;if(this.options.backtrack_lexer){token=this.test_match(tempMatch,rules[i]);if(token!==false){return token}else if(this._backtrack){match=false;continue}else{return false}}else if(!this.options.flex){break}}}if(match){token=this.test_match(match,rules[index]);if(token!==false){return token}return false}if(this._input===""){return this.EOF}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}},

            // return next match that has a token
            lex:function lex(){var r=this.next();if(r){return r}else{return this.lex()}},

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin:function begin(condition){this.conditionStack.push(condition)},

            // pop the previously active lexer condition state off the condition stack
            popState:function popState(){var n=this.conditionStack.length-1;if(n>0){return this.conditionStack.pop()}else{return this.conditionStack[0]}},

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules:function _currentRules(){if(this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules}else{return this.conditions["INITIAL"].rules}},

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState:function topState(n){n=this.conditionStack.length-1-Math.abs(n||0);if(n>=0){return this.conditionStack[n]}else{return"INITIAL"}},

            // alias for begin(condition)
            pushState:function pushState(condition){this.begin(condition)},

            // return the number of states currently on the stack
            stateStackSize:function stateStackSize(){return this.conditionStack.length},
            options: {},
            performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
                                              /*``*/) {

                var YYSTATE=YY_START;
                switch($avoiding_name_collisions) {
                    case 0:/* skip whitespace */
                        break;
                    case 1:return 54
                        break;
                    case 2:return 55
                        break;
                    case 3:return 56
                        break;
                    case 4:return 59
                        break;
                    case 5:return 60
                        break;
                    case 6:return 61
                        break;
                    case 7:return 66
                        break;
                    case 8:return 67
                        break;
                    case 9:return 58
                        break;
                    case 10:return 57
                        break;
                    case 11:return 17
                        break;
                    case 12:return 18
                        break;
                    case 13:return 13
                        break;
                    case 14:return 12
                        break;
                    case 15:return 15
                        break;
                    case 16:return 16
                        break;
                    case 17:return 10
                        break;
                    case 18:return 8
                        break;
                    case 19:return 27
                        break;
                    case 20:return 23
                        break;
                    case 21:return 24
                        break;
                    case 22:return 21
                        break;
                    case 23:return 20
                        break;
                    case 24:return 33
                        break;
                    case 25:return 34
                        break;
                    case 26:return 46
                        break;
                    case 27:return 47
                        break;
                    case 28:return 38
                        break;
                    case 29:return 39
                        break;
                    case 30:return 44
                        break;
                    case 31:return 62
                        break;
                    case 32:return 63
                        break;
                    case 33:return 42
                        break;
                    case 34:return 5
                        break;
                    case 35:return 'INVALID'
                        break;
                }
            },
            rules: [/^(?:\s+)/,/^(?:\d+(\.\d+)?([eE][+-]?\d+)?\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:`\d{2}\.\d{2}\.\d{4}`)/,/^(?:`\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}`)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:\$[a-zA-Z0-9_]+)/,/^(?:'((\\')*(\\[^'])*[^'\\]*)*')/,/^(?:"((\\")*(\\[^"])*[^"\\]*)*")/,/^(?:<=)/,/^(?:>=)/,/^(?:<>)/,/^(?:=)/,/^(?:<)/,/^(?:>)/,/^(?:&)/,/^(?:\|)/,/^(?:!)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:\.)/,/^(?:\?)/,/^(?:,)/,/^(?:$)/,/^(?:.)/],
            conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"inclusive":true}}
        };
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser () {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = parser;
    exports.Parser = parser.Parser;
    exports.parse = function () { return parser.parse.apply(parser, arguments); };
    // exports.main = function commonjsMain(args){if(!args[1]){console.log("Usage: "+args[0]+" FILE");process.exit(1)}var source=require("fs").readFileSync(require("path").normalize(args[1]),"utf8");return exports.parser.parse(source)};
    // if (typeof module !== 'undefined' && require.main === module) {
    //     exports.main(process.argv.slice(1));
    // }
}
